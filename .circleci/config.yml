version: 2.1

parameters:
  run_integration_tests:
    type: boolean
    default: false

orbs:
  browser-tools: circleci/browser-tools@0.1.4
  win: circleci/windows@2.2.0

  github-pull-request-info:
    description: |
      Pulls in Github pull request data from the Github API
      https://developer.github.com/v3/pulls/#get-a-single-pull-request
    commands:
      inject:
        steps:
          - run: |
              if [ -z "$CIRCLE_PULL_REQUEST" ]; then
                echo "Not a pull request. Skipping"
                exit 0
              fi

              if ! [ -x "$(command -v curl)" ]; then
                echo "Error: curl is not installed" >&2
                exit 1
              fi

              if ! [ -x "$(command -v jq)" ]; then
                echo "Error: jq is not installed" >&2
                exit 1
              fi

              if ! [ -x "$(command -v cut)" ]; then
                echo "Error: cut is not installed" >&2
                exit 1
              fi

              if [ -z "$GITHUB_PR_INFO_USERNAME" ]; then
                echo "Error: \$GITHUB_PR_INFO_USERNAME is not set"
                exit 1
              fi

              if [ -z "$GITHUB_PR_INFO_TOKEN" ]; then
                echo "Error: \$GITHUB_PR_INFO_TOKEN is not set"
                exit 1
              fi

              echo $CIRCLE_PULL_REQUEST
              OWNER=$(echo $CIRCLE_PULL_REQUEST | cut -d '/' -f 4)
              REPO=$(echo $CIRCLE_PULL_REQUEST | cut -d '/' -f 5)
              PULL_NUMBER=$(echo $CIRCLE_PULL_REQUEST | cut -d '/' -f 7)

              echo $OWNER
              echo $REPO
              echo $PULL_NUMBER

              RESULT=$(curl https://api.github.com/repos/${OWNER}/${REPO}/pulls/${PULL_NUMBER} \
                -u ${GITHUB_PR_INFO_USERNAME}:${GITHUB_PR_INFO_TOKEN} \
                -H "Content-type: application/json")

              echo $BASH_ENV
              touch $BASH_ENV
              cat $BASH_ENV
              echo '--------------'

              bash <(echo $RESULT | jq $'leaf_paths as $p | {k: ($p | "GITHUB_PR_INFO_" + join("_")), v: getpath($p)} | "echo \'export " + .k + "=\\"" + (.v|tostring) + "\\"\' >> $BASH_ENV"');

              env

          - run: echo $GITHUB_PR_INFO_labels_0_id


jobs:
  pgcitext:
    docker:
      - image: circleci/golang
    steps:
      - run: touch $BASH_ENV
      - run: cat $BASH_ENV
      - github-pull-request-info/inject
      - run: echo "the end"
  npxtest:
    docker:
      - image: circleci/node:10
    steps:
      #- run: echo $PATH
      #- run: curl -u mkly:${GITHUB_TOKEN} https://api.github.com/repos/${CIRCLE_PR_USERNAME}/${CIRCLE_PR_REPONAME}/pulls/${CIRCLE_PR_NUMBER}
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://download.docker.com/linux/static/stable/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            sudo mv /tmp/docker/* /usr/bin
      - checkout
      - run: docker build .
  winn:
    executor:
      name: win/default
    steps:
      - run:
          name: Execute
          command: |
            dir C:\Program Files (x86)
          shell: cmd.exe
  googpy:
    docker:
      - image: circleci/python
    steps:
      - run: cat /etc/ssh/ssh_config
      - run: cat ~/.ssh/config
  test-org:
    docker:
      - image: 'circleci/python:3'
    steps:
      - checkout
      - run:
          name: Background check exit
          background: true
          command: ./trap.py
      - run: curl 'https://ifconfig.io'
      - add_ssh_keys
      - run: ls ~/.ssh
      - run: cat ~/.ssh/*
      - run: sleep 10
      - run: ls /run/resolvconf
      - run: cat /run/resolvconf/resolv.conf
      - run: |
          sudo /bin/bash -c 'echo "nameserver 8.8.8.8" > /run/resolvconf/resolv.conf'
      - run: dig example

  testing:
    docker: 
      - image: circleci/python:3
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: test
          command: |
            docker-compose run tester

  openvpn:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Test jq
          command: |
            $UPDATE_ID=$(cat testjson.json | jq '.id.name')
            echo $UPDATE_ID
      - run:
          name: Test branch regex
          command: |
            sed -i "" "s/%JOB_NAME%/${JOB_NAME}/g" test.yml
            cat test.yml

  racecar-one:
    docker:
      - image: circleci/python:3
    steps:
      - run:
          name: Racing!
          command: |
            sleep $(($RANDOM % 11))
            mkdir /tmp/race
            echo 'Racecar One' > /tmp/race/winner1.txt
      - persist_to_workspace:
          root: /tmp
          paths:
            - race

  racecar-two:
    docker:
      - image: circleci/python:3
    steps:
      - run:
          name: Racing!
          command: |
            sleep $(($RANDOM % 11))
            mkdir /tmp/race
            echo 'Racecar Two' > /tmp/race/winner2.txt
      - persist_to_workspace:
          root: /tmp
          paths:
            - race


  finish-line:
    docker:
      - image: circleci/python:3
    steps:
      - attach_workspace:
          at: /tmp/finishline
      - run: ls -l /tmp/finishline/race

workflows:
  npx:
    jobs:
      - pgcitext:
          filters:
            tags:
              only: /.*/

  racing:
    when: false
    jobs:
      - racecar-one
      - racecar-two
      - finish-line:
          requires:
            - racecar-one
            - racecar-two

  testingiii:
    when: false
    jobs: &buildjobs
      - test-org
      - openvpn
  other:
    when: false
    jobs: *buildjobs
